#!/usr/bin/python3

import sys, time, math
import easysnmp
from easysnmp import Session, EasySNMPUnknownObjectIDError, EasySNMPTimeoutError

agn_details = sys.argv[1]
data_agn = agn_details.split(':')
addr = data_agn[0]
port = data_agn[1]
community = data_agn[2]
samp_freq = float(sys.argv[2])
N = int(sys.argv[3])
T = 1 / samp_freq
oids = []

if len(sys.argv) < 5:
    print("Usage: prober <Agent IP:port:community> <sample Fs> <samples> <OID1> <OID2> ... <OIDn>")
    sys.exit(1)

for parimi in range(4, len(sys.argv)):
    oids.append(sys.argv[parimi])
oids.insert(0, '1.3.6.1.2.1.1.3.0')

session_create = Session(hostname=addr, remote_port=port, community=community, version=2, timeout=1, retries=3)

def prober(counter, prev_counter, time_diff):
    rate = (counter - prev_counter) / time_diff
    return round(rate)

def nso():
    global previous_oid, previous_time, current_time
    try:
        response = session_create.get(oids)
    except EasySNMPUnknownObjectIDError as e:
        print(e, file=sys.stderr)
        sys.exit(1)
    except EasySNMPTimeoutError:
        print("SNMP request timed out. Check network connectivity and SNMP configuration.", file=sys.stderr)
        return

    system_uptime = int(response[0].value) / 100
    current_oid = []
    rates = []

    for me in range(1, len(response)):
        if response[me].value != 'NOSUCHOBJECT' and response[me].value != 'NOSUCHINSTANCE':
            if response[me].snmp_type in ['COUNTER64', 'GAUGE', 'COUNTER32', 'COUNTER']:
                current_oid.append(int(response[me].value))
            else:
                current_oid.append(response[me].value)

            if num != 0 and len(previous_oid) > 0:
                if system_uptime > previous_time:
                    if response[me].snmp_type in ['COUNTER', 'COUNTER32']:
                        numerator_oid = int(current_oid[me - 1]) - int(previous_oid[me - 1])
                        denominator_time = (system_uptime - previous_time)
                        rate = prober(numerator_oid, 0, denominator_time)
                        rates.append(max(0, rate))
                    elif response[me].snmp_type == 'COUNTER64':
                        numerator_oid = (int(current_oid[me - 1]) - int(previous_oid[me - 1])) & 0xFFFFFFFFFFFFFFFF
                        denominator_time = (system_uptime - previous_time)
                        rate = prober(numerator_oid, 0, denominator_time)
                        rates.append(max(0, rate))
                    elif response[me].snmp_type == 'GAUGE':
                        numerator_oid = int(current_oid[me - 1]) - int(previous_oid[me - 1])
                        rates.append((current_oid[len(current_oid) - 1], numerator_oid))
                    elif response[me].snmp_type == 'OCTETSTR':
                        rates.append(response[me].value)
                else:
                    rates.append("It appears that the system has been reset")

    if rates:  # Print only if there are valid rates to print
        print_sample_time_and_rates(current_time, rates)

    previous_oid = current_oid
    previous_time = system_uptime

def print_sample_time_and_rates(current_time, values):
    print(current_time, "|", end="")
    for value in values:
        if isinstance(value, tuple):
            print("", value[0], "(", value[1], ")", "|", end="")
        else:
            print("", value, "|", end="")
    print()  # Print a newline to separate different sample times

if N == -1:
    num = 0
    previous_oid = []
    while True:
        current_time = time.time()
        nso()
               
        function_T = time.time()
        num += 1
        if T >= function_T - current_time:
            time.sleep((T - function_T + current_time))
        else:
            m = math.ceil((function_T - current_time) / T)
            time.sleep(((m * T) - function_T + current_time))
else:
    previous_oid = []
    for num in range(0, N + 1):
        current_time = time.time()
        nso()
        function_T = time.time()
        if T >= function_T - current_time:
            time.sleep((T - function_T + current_time))
        else:
            m = math.ceil((function_T - current_time) / T)
            time.sleep(((m * T) - function_T + current_time))